// Import of plugins

plugins {
    id "org.jetbrains.dokka"
}

// Global variable declarations

ext{
    snapshot = Boolean.valueOf(System.getProperty("snapshot"))
}

group = 'de.henningwaack'
def junitInsightsVersion = '1.1.0' + (snapshot ? "-SNAPSHOT" : "")
version = junitInsightsVersion
sourceCompatibility = 1.8

// Build tasks

jar {
    enabled = true
    baseName = 'junit-insights'
    from {
        configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude("main.js")
}

task sourcesJar(type: Jar) {
    group = 'build'
    baseName = 'junit-insights'
    classifier = 'sources'
    from sourceSets.main.allSource
}

jar.dependsOn sourcesJar

bootJar {
    enabled = false
    mainClassName = "de.adesso.junitinsights.ApplicationKt"
}

// Test tasks
test {
    useJUnitPlatform()
    systemProperty 'de.adesso.junitinsights.enabled', 'false'
}


artifacts {
    archives sourcesJar
}

// npm specific tasks
task npmInstall(type: Exec) {
    inputs.files(
            'src/frontend/package-lock.json',
            'src/frontend/webpack.config.js'
    )
    outputs.dir 'src/frontend/node_modules/'

    workingDir = 'src/frontend/'
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'npm install'
    } else {
        commandLine 'sh', '-c', 'npm install'
    }
}

task npmRunBuild(type: Exec) {
    dependsOn npmInstall
    inputs.dir 'src/frontend/src'
    outputs.file 'src/main/resources/index.html'
    workingDir = 'src/frontend'
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'npm run build'
    } else {
        commandLine 'sh', '-c', 'npm run build'
    }
}

// Dependency declarations

dependencies {
    implementation('org.jetbrains.kotlin:kotlin-reflect')
    compile("com.google.code.gson:gson:$gsonVersion")

    compileOnly("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    compileOnly("org.junit.platform:junit-platform-launcher:$junitPlatformLauncherVersion")
    compileOnly('org.springframework.boot:spring-boot-starter')
    compileOnly('org.springframework:spring-test')

    testCompile("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
    testCompile("org.junit.platform:junit-platform-launcher:$junitPlatformLauncherVersion")
    testCompile('org.springframework.boot:spring-boot-starter')

    testImplementation("com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVersion")
}
